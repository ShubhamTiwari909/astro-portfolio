---
import { cn } from "../lib/utils";

export interface Props {
  class?: string;
}

const { class: className, ...rest } = Astro.props;

const navigationLinks = [
  { name: "Home", href: "#home" },
  { name: "About", href: "#about" },
  { name: "Skills", href: "#skills" },
  { name: "Projects", href: "#projects" },
  { name: "UI Showcase", href: "#ui-showcase" },
  { name: "Contact", href: "#contact" },
];
---

<nav
  class={cn(
    "fixed top-0 w-full z-50 bg-white/90 dark:bg-gray-900/90 backdrop-blur-xl border-b border-gray-200/50 dark:border-gray-700/50 shadow-lg shadow-gray-200/20 dark:shadow-gray-900/20",
    className
  )}
  {...rest}
>
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between items-center h-16">
      <!-- Logo -->
      <div class="flex-shrink-0">
        <a
          href="#home"
          class="group flex items-center space-x-2 text-2xl font-bold bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 bg-clip-text text-transparent hover:scale-105 transition-transform duration-300"
        >
          <div class="w-8 h-8 bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg flex items-center justify-center group-hover:rotate-12 transition-transform duration-300">
            <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd" />
            </svg>
          </div>
          <span>Portfolio</span>
        </a>
      </div>

      <!-- Desktop Navigation -->
      <div class="hidden md:block">
        <div class="ml-10 flex items-baseline space-x-2">
          {
            navigationLinks.map((link) => (
              <a
                href={link.href}
                class="group relative px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-all duration-300 rounded-lg hover:bg-blue-50 dark:hover:bg-blue-900/20"
              >
                <span class="relative z-10">{link.name}</span>
                <div class="absolute inset-0 bg-gradient-to-r from-blue-500/10 to-purple-500/10 rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                <div class="absolute bottom-0 left-1/2 w-0 h-0.5 bg-gradient-to-r from-blue-600 to-purple-600 group-hover:w-full group-hover:left-0 transition-all duration-300 rounded-full"></div>
              </a>
            ))
          }
        </div>
      </div>

      <!-- Mobile menu button -->
      <div class="md:hidden">
        <button
          id="mobile-menu-button"
          class="group relative p-2 text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 focus:outline-none focus:text-blue-600 dark:focus:text-blue-400 transition-all duration-300 rounded-lg hover:bg-blue-50 dark:hover:bg-blue-900/20"
        >
          <div class="w-6 h-6 flex flex-col justify-center items-center">
            <span class="block w-5 h-0.5 bg-current transform transition-all duration-300 group-hover:scale-110"></span>
            <span class="block w-5 h-0.5 bg-current mt-1 transform transition-all duration-300 group-hover:scale-110"></span>
            <span class="block w-5 h-0.5 bg-current mt-1 transform transition-all duration-300 group-hover:scale-110"></span>
          </div>
        </button>
      </div>
    </div>
  </div>

  <!-- Mobile Navigation -->
  <div
    id="mobile-menu"
    class="md:hidden hidden bg-white/95 dark:bg-gray-900/95 backdrop-blur-xl border-t border-gray-200/50 dark:border-gray-700/50 shadow-lg shadow-gray-200/20 dark:shadow-gray-900/20"
  >
    <div class="px-4 pt-4 pb-6 space-y-2">
      {
        navigationLinks.map((link, index) => (
          <a
            href={link.href}
            class="group flex items-center px-4 py-3 text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 text-base font-medium transition-all duration-300 rounded-xl hover:bg-gradient-to-r hover:from-blue-50 hover:to-purple-50 dark:hover:from-blue-900/20 dark:hover:to-purple-900/20 hover:shadow-md hover:scale-105"
            style={`animation-delay: ${index * 100}ms`}
          >
            <div class="w-2 h-2 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full mr-3 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
            <span class="relative">
              {link.name}
              <div class="absolute bottom-0 left-0 w-0 h-0.5 bg-gradient-to-r from-blue-600 to-purple-600 group-hover:w-full transition-all duration-300 rounded-full"></div>
            </span>
          </a>
        ))
      }
    </div>
  </div>
</nav>

<script>
  // Mobile menu toggle functionality
  document.addEventListener("DOMContentLoaded", function () {
    const mobileMenuButton = document.getElementById("mobile-menu-button");
    const mobileMenu = document.getElementById("mobile-menu");

    if (!mobileMenuButton || !mobileMenu) return;

    const icon = mobileMenuButton.querySelector("div");
    if (!icon) return;

    // Helper functions
    const closeMenu = () => {
      mobileMenu.classList.add("hidden");
      // Reset hamburger animation
      const spans = icon.querySelectorAll('span');
      spans.forEach((span) => {
        span.style.transform = 'scale(1)';
        span.style.transitionDelay = '0ms';
      });
    };

    const toggleMenu = () => {
      const isHidden = mobileMenu.classList.contains("hidden");
      mobileMenu.classList.toggle("hidden");
      
      // Animate hamburger to X
      const spans = icon.querySelectorAll('span');
      if (isHidden) {
        // Transform to X
        spans[0].style.transform = 'rotate(45deg) translate(5px, 2px)';
        spans[1].style.transform = 'scale(0)';
        spans[2].style.transform = 'rotate(-45deg) translate(7px, -3px)';
      } else {
        // Reset to hamburger
        spans.forEach((span, index) => {
          span.style.transform = 'scale(1)';
          span.style.transitionDelay = '0ms';
        });
      }
    };

    // Event listeners
    mobileMenuButton.addEventListener("click", toggleMenu);

    // Close menu on link click
    mobileMenu.querySelectorAll("a").forEach((link) => {
      link.addEventListener("click", closeMenu);
    });

    // Close menu on outside click
    document.addEventListener("click", (event) => {
      const target = event.target as Node;
      if (!mobileMenuButton.contains(target) && !mobileMenu.contains(target)) {
        closeMenu();
      }
    });
  });
</script>
